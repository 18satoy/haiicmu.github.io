{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Human-AI Interaction! Syllabus In short, the goal of this course is to introduce students to ways of thinking about how Artificial Intelligence will and has impacted humans, and how we can design interactive intelligent systems that are usable and beneficial to humans, and respect human values. As students in this course, you will build a number of different interactive technologies powered by AI, gain practical experience with what impacts their usability for humans, understand the various places that humans exist in the data pipeline that drives machine learning, and learn to think both optimistically and critically of what AI systems can do and how they can and should be integrated into society. Logistics Course : Location : Time : Communication Canvas : We will be using Canvas for all assignments and grades. Please also post all questions on Canvas as discussions instead of sending emails. Email : If you email your instructors, you must include the substring \"HAII Course\" to begin a meaningful subject line and have tried to resolve the issue appropriately otherwise. For example, you should post questions about course material and homework assignments on Canvas first, and then use emails only after an appropriate amount of time has passed without a response. Please use your CMU email account. Instructors Haiyi Zhu Email : haiyiz@cs.cmu.edu Office hours : N/A Location : Zoom Steven Wu Email : zsw@umn.edu Office hours : N/A Location : Zoom Grading Percentage Activity 6% Attendance & Active Participation 10% Reading Reflections (approximately once a week) 10% In-class Reading Panel Participation 14% Quizzes (15 quizzes in all, lowest score dropped). 60% Projects & Assignment Assignment 1-5, Final project: 10% Homeworks Each homework will have two parts: a programming component and a written component. There will be 5 homeworks in total, issued roughly every two weeks. Homeworks will generally be posted after lecture on Thursday, and are due roughly two weeks later before lecture. Keep an eye on the calendar! Late homework will not be accepted ---we will not have a late day policy. Instead, your lowest homework score will be dropped. Limited partial credit is possible for partial homework solutions. Collaboration policy : you can discuss with other students about the homework, but you must write up and code up the solutions on your own! You also must mention the names of the students you discuss with. FAQ Who should take this course? Advanced undergraduates or graduate students interested in how we design for better human AI interaction. What are the pre-requisites? N/A","title":"About"},{"location":"#welcome-to-human-ai-interaction","text":"","title":"Welcome to Human-AI Interaction!"},{"location":"#syllabus","text":"In short, the goal of this course is to introduce students to ways of thinking about how Artificial Intelligence will and has impacted humans, and how we can design interactive intelligent systems that are usable and beneficial to humans, and respect human values. As students in this course, you will build a number of different interactive technologies powered by AI, gain practical experience with what impacts their usability for humans, understand the various places that humans exist in the data pipeline that drives machine learning, and learn to think both optimistically and critically of what AI systems can do and how they can and should be integrated into society.","title":"Syllabus"},{"location":"#logistics","text":"Course : Location : Time :","title":"Logistics"},{"location":"#communication","text":"Canvas : We will be using Canvas for all assignments and grades. Please also post all questions on Canvas as discussions instead of sending emails. Email : If you email your instructors, you must include the substring \"HAII Course\" to begin a meaningful subject line and have tried to resolve the issue appropriately otherwise. For example, you should post questions about course material and homework assignments on Canvas first, and then use emails only after an appropriate amount of time has passed without a response. Please use your CMU email account.","title":"Communication"},{"location":"#instructors","text":"Haiyi Zhu Email : haiyiz@cs.cmu.edu Office hours : N/A Location : Zoom Steven Wu Email : zsw@umn.edu Office hours : N/A Location : Zoom","title":"Instructors"},{"location":"#grading","text":"Percentage Activity 6% Attendance & Active Participation 10% Reading Reflections (approximately once a week) 10% In-class Reading Panel Participation 14% Quizzes (15 quizzes in all, lowest score dropped). 60% Projects & Assignment Assignment 1-5, Final project: 10%","title":"Grading"},{"location":"#homeworks","text":"Each homework will have two parts: a programming component and a written component. There will be 5 homeworks in total, issued roughly every two weeks. Homeworks will generally be posted after lecture on Thursday, and are due roughly two weeks later before lecture. Keep an eye on the calendar! Late homework will not be accepted ---we will not have a late day policy. Instead, your lowest homework score will be dropped. Limited partial credit is possible for partial homework solutions. Collaboration policy : you can discuss with other students about the homework, but you must write up and code up the solutions on your own! You also must mention the names of the students you discuss with.","title":"Homeworks"},{"location":"#faq","text":"Who should take this course? Advanced undergraduates or graduate students interested in how we design for better human AI interaction. What are the pre-requisites? N/A","title":"FAQ"},{"location":"calendar/","text":"Course Schedule (Tentative) Lecture Date Topic Readings Notes 1 Course overview","title":"Calendar"},{"location":"calendar/#course-schedule-tentative","text":"Lecture Date Topic Readings Notes 1 Course overview","title":"Course Schedule (Tentative)"},{"location":"org/","text":"Course Organization Lectures Lectures have two formats: whiteboard presentation and slides presentation. Attending lectures is absolutely critical. Slides and lecture notes will be made available after lectures, but they will be difficult to understand in isolation. Readings will cover some---but not all---of the course material. Readings Most lectures are paired with a reading. These are optional and classes will not exactly follow the readings, but you will get more out of the lectures if you skim the readings afterwards. Readings will be drawn from these books: Homeworks Each homework will have two parts: a programming component and a written component. There will be 5 homeworks in total, issued roughly every two weeks. Homeworks will generally be posted after lecture on Thursday, and are due roughly two weeks later before lecture. Keep an eye on the calendar! Late homework will not be accepted ---we will not have a late day policy. Instead, your lowest homework score will be dropped. Limited partial credit is possible for partial homework solutions. Collaboration policy : you can discuss with other students about the homework, but you must write up and code up the solutions on your own! You also must mention the names of the students you discuss with. Midterm and Final exam Due to COVID-19, there will be no midterm exam. We will have a take-home final exam.","title":"Course Organization"},{"location":"org/#course-organization","text":"","title":"Course Organization"},{"location":"org/#lectures","text":"Lectures have two formats: whiteboard presentation and slides presentation. Attending lectures is absolutely critical. Slides and lecture notes will be made available after lectures, but they will be difficult to understand in isolation. Readings will cover some---but not all---of the course material.","title":"Lectures"},{"location":"org/#readings","text":"Most lectures are paired with a reading. These are optional and classes will not exactly follow the readings, but you will get more out of the lectures if you skim the readings afterwards. Readings will be drawn from these books:","title":"Readings"},{"location":"org/#homeworks","text":"Each homework will have two parts: a programming component and a written component. There will be 5 homeworks in total, issued roughly every two weeks. Homeworks will generally be posted after lecture on Thursday, and are due roughly two weeks later before lecture. Keep an eye on the calendar! Late homework will not be accepted ---we will not have a late day policy. Instead, your lowest homework score will be dropped. Limited partial credit is possible for partial homework solutions. Collaboration policy : you can discuss with other students about the homework, but you must write up and code up the solutions on your own! You also must mention the names of the students you discuss with.","title":"Homeworks"},{"location":"org/#midterm-and-final-exam","text":"Due to COVID-19, there will be no midterm exam. We will have a take-home final exam.","title":"Midterm and Final exam"},{"location":"syllabus/","text":"","title":"Syllabus"},{"location":"assets/custom-js/katex/","text":"KaTeX is a fast, easy-to-use JavaScript library for TeX math rendering on the web. Fast: KaTeX renders its math synchronously and doesn't need to reflow the page. See how it compares to a competitor in this speed test . Print quality: KaTeX\u2019s layout is based on Donald Knuth\u2019s TeX, the gold standard for math typesetting. Self contained: KaTeX has no dependencies and can easily be bundled with your website resources. Server side rendering: KaTeX produces the same output regardless of browser or environment, so you can pre-render expressions using Node.js and send them as plain HTML. KaTeX supports all major browsers, including Chrome, Safari, Firefox, Opera, Edge, and IE 9 - IE 11. More information can be found on the list of supported commands and on the wiki . Usage You can download KaTeX and host it on your server or include the katex.min.js and katex.min.css files on your page directly from a CDN: <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/katex@0.10.0-alpha/dist/katex.min.css\" integrity=\"sha384-BTL0nVi8DnMrNdMQZG1Ww6yasK9ZGnUxL1ZWukXQ7fygA1py52yPp9W4wrR00VML\" crossorigin=\"anonymous\"> <script src=\"https://cdn.jsdelivr.net/npm/katex@0.10.0-alpha/dist/katex.min.js\" integrity=\"sha384-y6SGsNt7yZECc4Pf86XmQhC4hG2wxL6Upkt9N1efhFxfh6wlxBH0mJiTE8XYclC1\" crossorigin=\"anonymous\"></script> In-browser rendering Call katex.render with a TeX expression and a DOM element to render into: katex.render(\"c = \\\\pm\\\\sqrt{a^2 + b^2}\", element); To avoid escaping the backslash (double backslash), you can use String.raw (but beware that ${ , \\u and \\x may still need escaping): katex.render(String.raw`c = \\pm\\sqrt{a^2 + b^2}`, element); If KaTeX can't parse the expression, it throws a katex.ParseError error. Server side rendering or rendering to a string To generate HTML on the server or to generate an HTML string of the rendered math, you can use katex.renderToString : var html = katex.renderToString(\"c = \\\\pm\\\\sqrt{a^2 + b^2}\"); // '<span class=\"katex\">...</span>' Make sure to include the CSS and font files, but there is no need to include the JavaScript. Like render , renderToString throws if it can't parse the expression. Security Any HTML generated by KaTeX should be safe from <script> or other code injection attacks. (See maxSize below for preventing large width/height visual affronts, and see maxExpand below for preventing infinite macro loop attacks.) Of course, it is always a good idea to sanitize the HTML, though you will need a rather generous whitelist (including some of SVG and MathML) to support all of KaTeX. Handling errors If KaTeX encounters an error (invalid or unsupported LaTeX) and throwOnError hasn't been set to false , then it will throw an exception of type katex.ParseError . The message in this error includes some of the LaTeX source code, so needs to be escaped if you want to render it to HTML. In particular, you should convert & , < , > characters to &amp; , &lt; , &gt; (e.g., using _.escape ) before including either LaTeX source code or exception messages in your HTML/DOM. (Failure to escape in this way makes a <script> injection attack possible if your LaTeX source is untrusted.) Alternatively, you can set throwOnError to false to use built-in behavior of rendering the LaTeX source code with hover text stating the error. Rendering options You can provide an object of options as the last argument to katex.render and katex.renderToString . Available options are: displayMode : boolean . If true the math will be rendered in display mode, which will put the math in display style (so \\int and \\sum are large, for example), and will center the math on the page on its own line. If false the math will be rendered in inline mode. (default: false ) throwOnError : boolean . If true (the default), KaTeX will throw a ParseError when it encounters an unsupported command or invalid LaTeX. If false , KaTeX will render unsupported commands as text, and render invalid LaTeX as its source code with hover text giving the error, in the color given by errorColor . errorColor : string . A color string given in the format \"#XXX\" or \"#XXXXXX\" . This option determines the color that unsupported commands and invalid LaTeX are rendered in when throwOnError is set to false . (default: #cc0000 ) macros : object . A collection of custom macros. Each macro is a property with a name like \\name (written \"\\\\name\" in JavaScript) which maps to a string that describes the expansion of the macro. Single-character keys can also be included in which case the character will be redefined as the given macro (similar to TeX active characters). This object will be modified if the LaTeX code defines its own macros via \\gdef , which enables consecutive calls to KaTeX to share state. colorIsTextColor : boolean . If true , \\color will work like LaTeX's \\textcolor , and take two arguments (e.g., \\color{blue}{hello} ), which restores the old behavior of KaTeX (pre-0.8.0). If false (the default), \\color will work like LaTeX's \\color , and take one argument (e.g., \\color{blue}hello ). In both cases, \\textcolor works as in LaTeX (e.g., \\textcolor{blue}{hello} ). maxSize : number . All user-specified sizes, e.g. in \\rule{500em}{500em} , will be capped to maxSize ems. If set to Infinity (the default), users can make elements and spaces arbitrarily large. maxExpand : number . Limit the number of macro expansions to the specified number, to prevent e.g. infinite macro loops. If set to Infinity , the macro expander will try to fully expand as in LaTeX. (default: 1000) strict : boolean or string or function (default: \"warn\" ). If false or \"ignore \", allow features that make writing LaTeX convenient but are not actually supported by (Xe)LaTeX (similar to MathJax). If true or \"error\" (LaTeX faithfulness mode), throw an error for any such transgressions. If \"warn\" (the default), warn about such behavior via console.warn . Provide a custom function handler(errorCode, errorMsg, token) to customize behavior depending on the type of transgression (summarized by the string code errorCode and detailed in errorMsg ); this function can also return \"ignore\" , \"error\" , or \"warn\" to use a built-in behavior. A list of such features and their errorCode s: \"unknownSymbol\" : Use of unknown Unicode symbol, which will likely also lead to warnings about missing character metrics, and layouts may be incorrect (especially in terms of vertical heights). \"unicodeTextInMathMode\" : Use of Unicode text characters in math mode. \"mathVsTextUnits\" : Mismatch of math vs. text commands and units/mode. A second category of errorCode s never throw errors, but their strictness affects the behavior of KaTeX: \"newLineInDisplayMode\" : Use of \\\\ or \\newline in display mode (outside an array/tabular environment). In strict mode, no line break results, as in LaTeX. For example: katex.render(\"c = \\\\pm\\\\sqrt{a^2 + b^2}\\\\in\\\\RR\", element, { displayMode: true, macros: { \"\\\\RR\": \"\\\\mathbb{R}\" } }); Automatic rendering of math on a page Math on the page can be automatically rendered using the auto-render extension. See the Auto-render README for more information. Font size and lengths By default, KaTeX math is rendered in a 1.21\u00d7 larger font than the surrounding context, which makes super- and subscripts easier to read. You can control this using CSS, for example: .katex { font-size: 1.1em; } KaTeX supports all TeX units, including absolute units like cm and in . Absolute units are currently scaled relative to the default TeX font size of 10pt, so that \\kern1cm produces the same results as \\kern2.845275em . As a result, relative and absolute units are both uniformly scaled relative to LaTeX with a 10pt font; for example, the rectangle \\rule{1cm}{1em} has the same aspect ratio in KaTeX as in LaTeX. However, because most browsers default to a larger font size, this typically means that a 1cm kern in KaTeX will appear larger than 1cm in browser units. Common Issues Many Markdown preprocessors, such as the one that Jekyll and GitHub Pages use, have a \"smart quotes\" feature. This changes ' to \u2019 which is an issue for math containing primes, e.g. f' . This can be worked around by defining a single character macro which changes them back, e.g. {\"\u2019\", \"'\"} . KaTeX follows LaTeX's rendering of aligned and matrix environments unlike MathJax. When displaying fractions one above another in these vertical layouts there may not be enough space between rows for people who are used to MathJax's rendering. The distance between rows can be adjusted by using \\\\[0.1em] instead of the standard line separator distance. KaTeX does not support the align environment because LaTeX doesn't support align in math mode. The aligned environment offers the same functionality but in math mode, so use that instead or define a macro that maps align to aligned . MathJax defines \\color to be like \\textcolor by default; set KaTeX's colorIsTextColor option to true for this behavior. KaTeX's default behavior matches MathJax with its color.js extension enabled. Libraries Angular2+ ng-katex Angular module to write beautiful math expressions with TeX syntax boosted by KaTeX library React react-latex React component to render latex strings, based on KaTeX react-katex React components that use KaTeX to typeset math expressions Ruby katex-ruby Provides server-side rendering and integration with popular Ruby web frameworks (Rails, Hanami, and anything that uses Sprockets). Contributing See CONTRIBUTING.md License KaTeX is licensed under the MIT License .","title":"[<img src=\"https://khan.github.io/KaTeX/katex-logo.svg\" width=\"130\" alt=\"KaTeX\">](https://khan.github.io/KaTeX/)"},{"location":"assets/custom-js/katex/#_1","text":"KaTeX is a fast, easy-to-use JavaScript library for TeX math rendering on the web. Fast: KaTeX renders its math synchronously and doesn't need to reflow the page. See how it compares to a competitor in this speed test . Print quality: KaTeX\u2019s layout is based on Donald Knuth\u2019s TeX, the gold standard for math typesetting. Self contained: KaTeX has no dependencies and can easily be bundled with your website resources. Server side rendering: KaTeX produces the same output regardless of browser or environment, so you can pre-render expressions using Node.js and send them as plain HTML. KaTeX supports all major browsers, including Chrome, Safari, Firefox, Opera, Edge, and IE 9 - IE 11. More information can be found on the list of supported commands and on the wiki .","title":""},{"location":"assets/custom-js/katex/#usage","text":"You can download KaTeX and host it on your server or include the katex.min.js and katex.min.css files on your page directly from a CDN: <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/katex@0.10.0-alpha/dist/katex.min.css\" integrity=\"sha384-BTL0nVi8DnMrNdMQZG1Ww6yasK9ZGnUxL1ZWukXQ7fygA1py52yPp9W4wrR00VML\" crossorigin=\"anonymous\"> <script src=\"https://cdn.jsdelivr.net/npm/katex@0.10.0-alpha/dist/katex.min.js\" integrity=\"sha384-y6SGsNt7yZECc4Pf86XmQhC4hG2wxL6Upkt9N1efhFxfh6wlxBH0mJiTE8XYclC1\" crossorigin=\"anonymous\"></script>","title":"Usage"},{"location":"assets/custom-js/katex/#in-browser-rendering","text":"Call katex.render with a TeX expression and a DOM element to render into: katex.render(\"c = \\\\pm\\\\sqrt{a^2 + b^2}\", element); To avoid escaping the backslash (double backslash), you can use String.raw (but beware that ${ , \\u and \\x may still need escaping): katex.render(String.raw`c = \\pm\\sqrt{a^2 + b^2}`, element); If KaTeX can't parse the expression, it throws a katex.ParseError error.","title":"In-browser rendering"},{"location":"assets/custom-js/katex/#server-side-rendering-or-rendering-to-a-string","text":"To generate HTML on the server or to generate an HTML string of the rendered math, you can use katex.renderToString : var html = katex.renderToString(\"c = \\\\pm\\\\sqrt{a^2 + b^2}\"); // '<span class=\"katex\">...</span>' Make sure to include the CSS and font files, but there is no need to include the JavaScript. Like render , renderToString throws if it can't parse the expression.","title":"Server side rendering or rendering to a string"},{"location":"assets/custom-js/katex/#security","text":"Any HTML generated by KaTeX should be safe from <script> or other code injection attacks. (See maxSize below for preventing large width/height visual affronts, and see maxExpand below for preventing infinite macro loop attacks.) Of course, it is always a good idea to sanitize the HTML, though you will need a rather generous whitelist (including some of SVG and MathML) to support all of KaTeX.","title":"Security"},{"location":"assets/custom-js/katex/#handling-errors","text":"If KaTeX encounters an error (invalid or unsupported LaTeX) and throwOnError hasn't been set to false , then it will throw an exception of type katex.ParseError . The message in this error includes some of the LaTeX source code, so needs to be escaped if you want to render it to HTML. In particular, you should convert & , < , > characters to &amp; , &lt; , &gt; (e.g., using _.escape ) before including either LaTeX source code or exception messages in your HTML/DOM. (Failure to escape in this way makes a <script> injection attack possible if your LaTeX source is untrusted.) Alternatively, you can set throwOnError to false to use built-in behavior of rendering the LaTeX source code with hover text stating the error.","title":"Handling errors"},{"location":"assets/custom-js/katex/#rendering-options","text":"You can provide an object of options as the last argument to katex.render and katex.renderToString . Available options are: displayMode : boolean . If true the math will be rendered in display mode, which will put the math in display style (so \\int and \\sum are large, for example), and will center the math on the page on its own line. If false the math will be rendered in inline mode. (default: false ) throwOnError : boolean . If true (the default), KaTeX will throw a ParseError when it encounters an unsupported command or invalid LaTeX. If false , KaTeX will render unsupported commands as text, and render invalid LaTeX as its source code with hover text giving the error, in the color given by errorColor . errorColor : string . A color string given in the format \"#XXX\" or \"#XXXXXX\" . This option determines the color that unsupported commands and invalid LaTeX are rendered in when throwOnError is set to false . (default: #cc0000 ) macros : object . A collection of custom macros. Each macro is a property with a name like \\name (written \"\\\\name\" in JavaScript) which maps to a string that describes the expansion of the macro. Single-character keys can also be included in which case the character will be redefined as the given macro (similar to TeX active characters). This object will be modified if the LaTeX code defines its own macros via \\gdef , which enables consecutive calls to KaTeX to share state. colorIsTextColor : boolean . If true , \\color will work like LaTeX's \\textcolor , and take two arguments (e.g., \\color{blue}{hello} ), which restores the old behavior of KaTeX (pre-0.8.0). If false (the default), \\color will work like LaTeX's \\color , and take one argument (e.g., \\color{blue}hello ). In both cases, \\textcolor works as in LaTeX (e.g., \\textcolor{blue}{hello} ). maxSize : number . All user-specified sizes, e.g. in \\rule{500em}{500em} , will be capped to maxSize ems. If set to Infinity (the default), users can make elements and spaces arbitrarily large. maxExpand : number . Limit the number of macro expansions to the specified number, to prevent e.g. infinite macro loops. If set to Infinity , the macro expander will try to fully expand as in LaTeX. (default: 1000) strict : boolean or string or function (default: \"warn\" ). If false or \"ignore \", allow features that make writing LaTeX convenient but are not actually supported by (Xe)LaTeX (similar to MathJax). If true or \"error\" (LaTeX faithfulness mode), throw an error for any such transgressions. If \"warn\" (the default), warn about such behavior via console.warn . Provide a custom function handler(errorCode, errorMsg, token) to customize behavior depending on the type of transgression (summarized by the string code errorCode and detailed in errorMsg ); this function can also return \"ignore\" , \"error\" , or \"warn\" to use a built-in behavior. A list of such features and their errorCode s: \"unknownSymbol\" : Use of unknown Unicode symbol, which will likely also lead to warnings about missing character metrics, and layouts may be incorrect (especially in terms of vertical heights). \"unicodeTextInMathMode\" : Use of Unicode text characters in math mode. \"mathVsTextUnits\" : Mismatch of math vs. text commands and units/mode. A second category of errorCode s never throw errors, but their strictness affects the behavior of KaTeX: \"newLineInDisplayMode\" : Use of \\\\ or \\newline in display mode (outside an array/tabular environment). In strict mode, no line break results, as in LaTeX. For example: katex.render(\"c = \\\\pm\\\\sqrt{a^2 + b^2}\\\\in\\\\RR\", element, { displayMode: true, macros: { \"\\\\RR\": \"\\\\mathbb{R}\" } });","title":"Rendering options"},{"location":"assets/custom-js/katex/#automatic-rendering-of-math-on-a-page","text":"Math on the page can be automatically rendered using the auto-render extension. See the Auto-render README for more information.","title":"Automatic rendering of math on a page"},{"location":"assets/custom-js/katex/#font-size-and-lengths","text":"By default, KaTeX math is rendered in a 1.21\u00d7 larger font than the surrounding context, which makes super- and subscripts easier to read. You can control this using CSS, for example: .katex { font-size: 1.1em; } KaTeX supports all TeX units, including absolute units like cm and in . Absolute units are currently scaled relative to the default TeX font size of 10pt, so that \\kern1cm produces the same results as \\kern2.845275em . As a result, relative and absolute units are both uniformly scaled relative to LaTeX with a 10pt font; for example, the rectangle \\rule{1cm}{1em} has the same aspect ratio in KaTeX as in LaTeX. However, because most browsers default to a larger font size, this typically means that a 1cm kern in KaTeX will appear larger than 1cm in browser units.","title":"Font size and lengths"},{"location":"assets/custom-js/katex/#common-issues","text":"Many Markdown preprocessors, such as the one that Jekyll and GitHub Pages use, have a \"smart quotes\" feature. This changes ' to \u2019 which is an issue for math containing primes, e.g. f' . This can be worked around by defining a single character macro which changes them back, e.g. {\"\u2019\", \"'\"} . KaTeX follows LaTeX's rendering of aligned and matrix environments unlike MathJax. When displaying fractions one above another in these vertical layouts there may not be enough space between rows for people who are used to MathJax's rendering. The distance between rows can be adjusted by using \\\\[0.1em] instead of the standard line separator distance. KaTeX does not support the align environment because LaTeX doesn't support align in math mode. The aligned environment offers the same functionality but in math mode, so use that instead or define a macro that maps align to aligned . MathJax defines \\color to be like \\textcolor by default; set KaTeX's colorIsTextColor option to true for this behavior. KaTeX's default behavior matches MathJax with its color.js extension enabled.","title":"Common Issues"},{"location":"assets/custom-js/katex/#libraries","text":"","title":"Libraries"},{"location":"assets/custom-js/katex/#angular2","text":"ng-katex Angular module to write beautiful math expressions with TeX syntax boosted by KaTeX library","title":"Angular2+"},{"location":"assets/custom-js/katex/#react","text":"react-latex React component to render latex strings, based on KaTeX react-katex React components that use KaTeX to typeset math expressions","title":"React"},{"location":"assets/custom-js/katex/#ruby","text":"katex-ruby Provides server-side rendering and integration with popular Ruby web frameworks (Rails, Hanami, and anything that uses Sprockets).","title":"Ruby"},{"location":"assets/custom-js/katex/#contributing","text":"See CONTRIBUTING.md","title":"Contributing"},{"location":"assets/custom-js/katex/#license","text":"KaTeX is licensed under the MIT License .","title":"License"},{"location":"hw/instructions/","text":"Instructions Basics Late homework will not be accepted . Instead, your lowest homework grade will be dropped. Programming Assignments All programming in Python . Please get familiar with: Python3 Python Notebook (Jupyter) Installation : Most programming assignment will be done in a Python notebook. You can run your code on Google Colab . If you prefer to run your code on your local machine, you should install Anaconda . Written Assignments For the written assignments, it is required that you typeset your homeworks in LaTeX . There are many free integrated LaTeX editors that are convenient to use (e.g., Overleaf ). Collaboration Policy You are encouraged to collaborate with your classmates on homework problems, but each person must write up the final solutions individually. You should note on your homework specifically which problems were a collaborative effort and with whom. You may not search online for solutions. Outside Sources Outside sources are a bit less clear. You should not : Google around for solutions to homework problems. Ask for help on online. Look up things/post on sites like Quora, StackExchange, etc.","title":"Instructions"},{"location":"hw/instructions/#instructions","text":"","title":"Instructions"},{"location":"hw/instructions/#basics","text":"Late homework will not be accepted . Instead, your lowest homework grade will be dropped.","title":"Basics"},{"location":"hw/instructions/#programming-assignments","text":"All programming in Python . Please get familiar with: Python3 Python Notebook (Jupyter) Installation : Most programming assignment will be done in a Python notebook. You can run your code on Google Colab . If you prefer to run your code on your local machine, you should install Anaconda .","title":"Programming Assignments"},{"location":"hw/instructions/#written-assignments","text":"For the written assignments, it is required that you typeset your homeworks in LaTeX . There are many free integrated LaTeX editors that are convenient to use (e.g., Overleaf ).","title":"Written Assignments"},{"location":"hw/instructions/#collaboration-policy","text":"You are encouraged to collaborate with your classmates on homework problems, but each person must write up the final solutions individually. You should note on your homework specifically which problems were a collaborative effort and with whom. You may not search online for solutions.","title":"Collaboration Policy"},{"location":"hw/instructions/#outside-sources","text":"Outside sources are a bit less clear. You should not : Google around for solutions to homework problems. Ask for help on online. Look up things/post on sites like Quora, StackExchange, etc.","title":"Outside Sources"},{"location":"resources/math/","text":"Math Resources Books The Matrix Cookbook by Kaare Brandt Petersen and Michael Syskind Pedersen Calculus by Jerrold E. Marsden and Alan Weinstein Open Courses Introduction to Probability and Statistics Linear Algebra","title":"Math Resources"},{"location":"resources/math/#math-resources","text":"","title":"Math Resources"},{"location":"resources/math/#books","text":"The Matrix Cookbook by Kaare Brandt Petersen and Michael Syskind Pedersen Calculus by Jerrold E. Marsden and Alan Weinstein","title":"Books"},{"location":"resources/math/#open-courses","text":"Introduction to Probability and Statistics Linear Algebra","title":"Open Courses"},{"location":"resources/others/","text":"Related Courses Previous offering by Chinmay Kulkarni and Mary Beth Kery","title":"Related courses"},{"location":"resources/others/#related-courses","text":"Previous offering by Chinmay Kulkarni and Mary Beth Kery","title":"Related Courses"},{"location":"resources/python/","text":"Python Resources Python Python tutorials PyTorch Check out PyTorch and its tutorials","title":"Python"},{"location":"resources/python/#python-resources","text":"","title":"Python Resources"},{"location":"resources/python/#python","text":"Python tutorials","title":"Python"},{"location":"resources/python/#pytorch","text":"Check out PyTorch and its tutorials","title":"PyTorch"}]}